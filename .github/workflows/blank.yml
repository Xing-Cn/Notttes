name: 额の自动化程序壹号~改

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ctf-stats:
    runs-on: ubuntu-latest
    steps:
    - name: 获取代码
      uses: actions/checkout@v4
      
    - name: 快速统计
      id: stats
      run: |
        echo "🔍开始统计笔记..."
        
        # 统计CTFFFF!!!文件夹里的.md文件总数
        CTF_TOTAL=$(find CTFFFF!!! -name "*.md" 2>/dev/null | wc -l || echo "0")
        
        # 统计这次推送变化的笔记数量
        CTF_CHANGED=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | grep "^CTFFFF!!!/.*\.md$" | wc -l || echo "0")
        
        # 获取最新笔记信息
        LATEST_NOTE=$(find CTFFFF!!! -name "*.md" -type f -exec stat -c "%Y %n" {} \; 2>/dev/null | sort -nr | head -1 | cut -d' ' -f2-)
        LATEST_NOTE_NAME=$(basename "$LATEST_NOTE" .md)
        
        # 获取笔记的相对路径(用于链接)
        NOTE_REL_PATH=$(echo "$LATEST_NOTE" | sed 's|^\./||')
        
        echo "📊统计完成: 笔记总数 $CTF_TOTAL 篇, 本次更新 $CTF_CHANGED 篇"
        
        # 保存统计结果
        echo "ctf_changed=$CTF_CHANGED" >> $GITHUB_OUTPUT
        echo "ctf_total=$CTF_TOTAL" >> $GITHUB_OUTPUT
        echo "latest_note=$LATEST_NOTE_NAME" >> $GITHUB_OUTPUT
        echo "note_path=$NOTE_REL_PATH" >> $GITHUB_OUTPUT
        
    - name: 更新README统计
      run: |
        echo "📝检查是否需要更新README..."
        # 显示北京时间 (UTC+8)
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M')

        # 判断触发方式
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TRIGGER_SOURCE="🔄手动触发"
          TRIGGER_DETAIL="(通过网页手动执行)"
        else
          TRIGGER_SOURCE="✅自动运行"
          TRIGGER_DETAIL="(代码推送触发)"
        fi

        # 判断是否需要更新: 如果有文件变化, 或者笔记总数变了
        if [ "${{ steps.stats.outputs.ctf_changed }}" -gt 0 ] || 
           [ "${{ github.event_name }}" == "workflow_dispatch" ] ||
           ! grep -q "笔记总数: ${{ steps.stats.outputs.ctf_total }} 篇" README.md 2>/dev/null; then
      
          echo "🔄需要更新, 开始处理README..."
          
          # 删除旧的统计区块(如果存在)
          if grep -q "### 🚀笔记统计" README.md; then
            echo "🗑️删除旧统计区块..."
            sed -i '/### 🚀笔记统计/,/*auto updata*/d' README.md
          fi
          

          # 添加新的统计区块(逐行添加，避免语法错误)
          echo "" >> README.md
          echo "### 🚀笔记统计" >> README.md
          echo "> 最后同步 : $BEIJING_TIME" >> README.md
          echo "" >> README.md
          echo "- 笔记总数 : ${{ steps.stats.outputs.ctf_total }} 篇" >> README.md
          echo "- 本次更新 : ${{ steps.stats.outputs.ctf_changed }} 篇" >> README.md
          echo "- 触发方式 : $TRIGGER_SOURCE $TRIGGER_DETAIL" >> README.md
          echo "" >> README.md
          echo "*auto updata*" >> README.md

          # 新增笔记链接区域
          echo "" >> README.md
          echo "### 📖 最新笔记" >> README.md
          echo "" >> README.md
          echo "**[${{ steps.stats.outputs.latest_note }}](./${{ steps.stats.outputs.note_path }})**" >> README.md
          echo "" >> README.md
          echo "> 📅 最近更新的CTF学习笔记" >> README.md
          echo "> " >> README.md
          echo "> 🔗 [点击查看完整内容](./${{ steps.stats.outputs.note_path }})" >> README.md
          echo "" >> README.md
          echo "---" >> README.md
          
          echo "✅README更新完成"
          echo "should_commit=true" >> $GITHUB_ENV
        else
          echo "⏭️统计无变化，跳过更新"
          echo "should_commit=false" >> $GITHUB_ENV
        fi
        
    - name: 条件提交
      if: env.should_commit == 'true'
      run: |
        echo "🚀提交统计更新..."
        git config --local user.email "a138196861120@163.com"
        git config --local user.name "Xing-Cn"
        git add README.md
        git commit -m "📊更新统计 : +${{ steps.stats.outputs.ctf_changed }} 篇"
        git push
        echo "🎉提交完成！"