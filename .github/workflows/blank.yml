name: 笔记库智能检查

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    # 第一步：获取代码
    - name: 获取仓库代码
      uses: actions/checkout@v4
      
    # 第二步：基础检查
    - name: 基础检查
      run: |
        echo "🎉 笔记库检查开始..."
        echo "📁 文件结构："
        find . -maxdepth 2 -type d | grep -v ".git" | sort
        echo "📝 笔记统计："
        find . -name "*.md" | wc -l | xargs echo "总Markdown文件:"
        
    # 第三步：更新README的统计信息
    - name: 更新README统计
      run: |
        echo "📊 正在更新README显示..."
        
        # 统计信息
        NOTE_COUNT=$(find . -name "*.md" | wc -l)
        LAST_UPDATE=$(git log -1 --format="%Y-%m-%d %H:%M")
        LAST_COMMIT=$(git log -1 --format="%s")
        
        # 创建临时文件来生成统计内容
        cat > /tmp/stats.md << 'EOF'
        
## 🚀 实时统计
> 最后同步: 
        
- 笔记总数:  篇
- 最近更新: 
- 检查状态: ✅ 运行正常
        
*此统计由 GitHub Action 自动更新*
EOF
        
        # 插入实际数据
        sed -i "s/最后同步: .*/最后同步: $LAST_UPDATE/" /tmp/stats.md
        sed -i "s/笔记总数: .*/笔记总数: $NOTE_COUNT 篇/" /tmp/stats.md
        sed -i "s/最近更新: .*/最近更新: $LAST_COMMIT/" /tmp/stats.md
        
        # 检查是否已有统计区块
        if grep -q "## 🚀 实时统计" README.md; then
          echo "📝 更新现有统计区块..."
          # 删除旧的统计区块（从 ## 🚀 实时统计 到下一个 ## 开头或文件结尾）
          sed -i '/## 🚀 实时统计/,/^## [^#]/{//!d}; /## 🚀 实时统计/d' README.md
        fi
        
        # 添加统计区块到README
        cat /tmp/stats.md >> README.md
        echo "✅ README 更新完成！"
        
    # 第四步：提交更新
    - name: 提交更改
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "📊 更新实时统计信息"
        git push
